var documenterSearchIndex = {"docs":
[{"location":"walkthrough/#A-fuller-walkthrough","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"","category":"section"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"ghroot = pwd() |> dirname","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"note: Note\nThe examples in this walkthrough use sample data in the test/data directory of this package's github repository.","category":"page"},{"location":"walkthrough/#Define-a-repository","page":"A fuller walkthrough","title":"Define a repository","text":"","category":"section"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"An EditingRepository works with three kinds of data: text editions, indexes of text passages to images and physical surfaces, and configuration data specifying how to transform the edition files into citable texts. The repository expects each type of data to be managed in a separate directory.  By default, their names are editions, config and dse.","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"repopath = joinpath(ghroot, \"test\", \"data\", \"splitdocs\")\nusing EditorsRepo\nrepo = repository(repopath)","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"You can optionally provide non-default names for any of these three directories.","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"path = joinpath(ghroot, \"test\", \"data\", \"mixedrepo\")\nrepository(path, editions = \"editing\")","category":"page"},{"location":"walkthrough/#Text-editions-and-configuration","page":"A fuller walkthrough","title":"Text editions and configuration","text":"","category":"section"},{"location":"walkthrough/#Files","page":"A fuller walkthrough","title":"Files","text":"","category":"section"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"The catalog file (default name: catalog.cex) is a CITE text catalog.  Its entries represent logical units.","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"The citation file (default name: citation.cex) is a delimited text file with entries representing physical files.  It is possible to have a single logical text edited in multiple physical files.","category":"page"},{"location":"walkthrough/#Functions","page":"A fuller walkthrough","title":"Functions","text":"","category":"section"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"Internally, EditorsRepo uses these functions to read the configuration of your text documents:","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"fileswithin.  List all files that are contained by a given URN.\nfilescontaining.  List all files that contain a given URN","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"The following functions use \"contained by\" logic.","category":"page"},{"location":"walkthrough/","page":"A fuller walkthrough","title":"A fuller walkthrough","text":"o2converter\ndiplomaticbuilder\nnormalizedbuilder\northography","category":"page"},{"location":"walkthrough/#DSE-records","page":"A fuller walkthrough","title":"DSE records","text":"","category":"section"},{"location":"#EditorsRepo.jl","page":"Home","title":"EditorsRepo.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Manage editing of digital scholarly editions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ghroot = pwd() |> dirname\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"EditorsRepo.jl lets you work with files of editing work in progress in a local file system using more abstract structures such as \"a corpus of citable texts\" (CitableText.Corpus) or \"a record associating texts, image and physical surface\" (from the CitablePhysicalText module).","category":"page"},{"location":"","page":"Home","title":"Home","text":"One important application built with EditorsRepo.jl is the Pluto notebook providing interactive validation and verification of work in progress. (You can find it in the notebooks directory of the template github repository here.)","category":"page"},{"location":"#Briefest-possible-example","page":"Home","title":"Briefest possible example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create an EditingRepository by giving the repository function the root directory of your editing repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"repopath = joinpath(ghroot, \"data\", \"splitdocs\")\nusing EditorsRepo\nrepo = repository(repopath)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Collect a corpus of normalized texts from the repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CitableText, CitableCorpus\nnormalizedcorpus(repo)","category":"page"},{"location":"man/#API-documentation","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"man/#The-basic-Type","page":"API documentation","title":"The basic Type","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"The starting point for EditorsRepo.jl is a directory in a local file system that includes subdirectories for standard kinds of content: editions of texts, indexing of texts to citable images and surfaces, and configuration files.","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"EditingRepository\nrepository\nconfigdir\ndsedir\neditionsdir","category":"page"},{"location":"man/#EditorsRepo.EditingRepository","page":"API documentation","title":"EditorsRepo.EditingRepository","text":"File organization of a repository for HMT editors.\n\nMembers\n\neditions Path to directory with source files for textual editions.\ndse  Path to directory with delimited text files recording text, image and surface relations.\nconfigs Path to directory with catalog.cex and citation.cex files.\n\n\n\n\n\n","category":"type"},{"location":"man/#EditorsRepo.repository","page":"API documentation","title":"EditorsRepo.repository","text":"Construct an EditingRepository from a root directory containing all three required directories.\n\nrepository(repodir; editions, dse, config)\n\n\nIf the required directories are named \"editions\", \"dse\" and \"config\", repodir is the only parameter needed.  Optionally, you may supply names  for any of those directories relative to reporoot.\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.configdir","page":"API documentation","title":"EditorsRepo.configdir","text":"Find configuration directory for repository.\n\nconfigdir(repo)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.dsedir","page":"API documentation","title":"EditorsRepo.dsedir","text":"Find DSE directory for repository.\n\ndsedir(repo)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.editionsdir","page":"API documentation","title":"EditorsRepo.editionsdir","text":"Find editions directory for repository.\n\neditionsdir(repo)\n\n\n\n\n\n\n","category":"function"},{"location":"man/","page":"API documentation","title":"API documentation","text":"Text configuration:","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"citationconfig\nfilename\no2converter,\ndiplomaticbuilder\nnormalizedbuilder\northography","category":"page"},{"location":"man/#EditorsRepo.citationconfig","page":"API documentation","title":"EditorsRepo.citationconfig","text":"Read citation configuration into a Table.\n\ncitationconfig(repo; filename, delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.orthography","page":"API documentation","title":"EditorsRepo.orthography","text":"Lookup orthography for a text identified by URN.\n\northography(repo, txturn)\n\n\nIf one than one configuration entry matches txturn, it is assumed that all entries are configured to use the same orthography, and only the first entry is instantiated and returned.\n\n\n\n\n\n","category":"function"},{"location":"man/","page":"API documentation","title":"API documentation","text":"Text catalog and contents:","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"textcatalog\ntexturns\narchivalcorpus\ndiplomaticcorpus\nnormalizedcorpus","category":"page"},{"location":"man/#EditorsRepo.textcatalog","page":"API documentation","title":"EditorsRepo.textcatalog","text":"Read a TextCatalogCollection for a repository.\n\ntextcatalog(repo; catalogname, delimiter)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.texturns","page":"API documentation","title":"EditorsRepo.texturns","text":"Find CTS URNs of all texts cataloged as online.\n\ntexturns(repo)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.archivalcorpus","page":"API documentation","title":"EditorsRepo.archivalcorpus","text":"Create a citable corpus of all archival text in a repo.\n\narchivalcorpus(r; skipref)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.diplomaticcorpus","page":"API documentation","title":"EditorsRepo.diplomaticcorpus","text":"Create diplomatic editions of all texts in a repo.\n\ndiplomaticcorpus(r; sourcecorpus)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.normalizedcorpus","page":"API documentation","title":"EditorsRepo.normalizedcorpus","text":"Create normalized editions of all texts in a repo.\n\nnormalizedcorpus(r; sourcecorpus)\n\n\n\n\n\n\n","category":"function"},{"location":"man/","page":"API documentation","title":"API documentation","text":"Classified tokenization:","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"tokencorpus","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"DSE records:","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"dsetriples\npassageurnsforsurface\ndiplomaticforsurface\nimagesforpassage","category":"page"},{"location":"man/#EditorsRepo.dsetriples","page":"API documentation","title":"EditorsRepo.dsetriples","text":"dsetriples(repo)\n\n\nList .cex files in DSE directory.\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.passageurnsforsurface","page":"API documentation","title":"EditorsRepo.passageurnsforsurface","text":"passageurnsforsurface(r, u)\n\n\nCompute list of passages in DSE records for a given surface.\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.diplomaticforsurface","page":"API documentation","title":"EditorsRepo.diplomaticforsurface","text":"diplomaticforsurface(r, u)\n\n\nAssemble citable passages in diplomatic edition for a given surface.\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.imagesforpassage","page":"API documentation","title":"EditorsRepo.imagesforpassage","text":"imagesforpassage(r, u)\n\n\nCompute list of images in DSE records for a given passage.\n\n\n\n\n\n","category":"function"},{"location":"man/","page":"API documentation","title":"API documentation","text":"HTML utilities:","category":"page"},{"location":"man/","page":"API documentation","title":"API documentation","text":"htmltoken","category":"page"},{"location":"man/#EditorsRepo.htmltoken","page":"API documentation","title":"EditorsRepo.htmltoken","text":"Format an orthographic token in HTML.\n\nhtmltoken(psg, tokentype, ok)\n\n\nAdds appropriate whitespace to non-punctuation tokens, and wraps orthographically failed tokens in span element.\n\n\n\n\n\n","category":"function"},{"location":"man/#Internal-functions","page":"API documentation","title":"Internal functions","text":"","category":"section"},{"location":"man/","page":"API documentation","title":"API documentation","text":"EditorsRepo.xmlfiles\nEditorsRepo.textpassages\nEditorsRepo.isref\nEditorsRepo.passages_for_tokens\nEditorsRepo.analyzedtokens","category":"page"},{"location":"man/#EditorsRepo.xmlfiles","page":"API documentation","title":"EditorsRepo.xmlfiles","text":"xmlfiles(repository)\n\n\nFind names of XML files in editing directory.\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.textpassages","page":"API documentation","title":"EditorsRepo.textpassages","text":"Select from a corpus those matching a given URN, omitting ref passages conventionally used for non-textual metadata.\n\ntextpassages(c, u; skipref)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.isref","page":"API documentation","title":"EditorsRepo.isref","text":"True if last component of CTS URN passage is \"ref\". MID convention is to exclude elements, like notes on HMT scholia,   with this identifier.\n\nisref(urn)\n\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.passages_for_tokens","page":"API documentation","title":"EditorsRepo.passages_for_tokens","text":"Create a list of CitablePassages from a list of OrthographicTokens  and a passage URN.\n\npassages_for_tokens(tkns, urn)\n\n\nPassage URNs are extended with an additional level of citation for the individual token.  This citation tier is made up of sequential numbers for lexical tokens, and token number + a character for other kinds of tokens (1a, 1b, etc.).\n\n\n\n\n\n","category":"function"},{"location":"man/#EditorsRepo.analyzedtokens","page":"API documentation","title":"EditorsRepo.analyzedtokens","text":"Compute a list of OrthographicTokens based on the normalized edition of all texts in the repository.  The result is a list of tuples pairing a citable text passage for the token and its type.\n\nanalyzedtokens(r)\n\n\n\n\n\n\nFor a single token citable as a CitablePassage, find its token class and determine if it is orthographically valid.\n\nanalyzedtokens(r, cn)\n\n\nReturns a tuple of a token type and a boolean value.\n\n\n\n\n\n","category":"function"}]
}
